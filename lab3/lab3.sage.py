

# This file was *autogenerated* from the file lab3.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_12 = Integer(12); _sage_const_8 = Integer(8); _sage_const_1 = Integer(1); _sage_const_24 = Integer(24); _sage_const_4 = Integer(4); _sage_const_5 = Integer(5); _sage_const_17 = Integer(17); _sage_const_14 = Integer(14); _sage_const_18 = Integer(18); _sage_const_9 = Integer(9); _sage_const_10 = Integer(10); _sage_const_30 = Integer(30); _sage_const_13 = Integer(13); _sage_const_11 = Integer(11); _sage_const_16 = Integer(16); _sage_const_22 = Integer(22); _sage_const_31 = Integer(31); _sage_const_21 = Integer(21); _sage_const_0 = Integer(0)
errors = _sage_const_2  
b = _sage_const_12 
# powers = [25, 24, 16, 20, 25, 1, 27, 24, 2, 1, 10, 16, 20, 28, 8, 2, 9, 21, 3, 29, -1, 18, 30, 2, 29, 8, 23, 15, 1, 23, 25]
powers = [_sage_const_12 , _sage_const_8 , _sage_const_1 , _sage_const_24 , _sage_const_4 , _sage_const_5 , _sage_const_4 , _sage_const_8 , _sage_const_17 , _sage_const_14 , _sage_const_18 , _sage_const_18 , _sage_const_9 , _sage_const_10 , _sage_const_4 , _sage_const_4 , _sage_const_9 , _sage_const_24 , _sage_const_30 , _sage_const_1 , _sage_const_10 , _sage_const_13 , _sage_const_13 , _sage_const_11 , _sage_const_17 , _sage_const_16 , _sage_const_11 , _sage_const_22 , _sage_const_2 , _sage_const_1 , _sage_const_12 ]
# powers = [24, 23, 8, 1, -1, 4, 13, 21, 21, 3, 6, 22, 5, 15, 8, 16, 26, 14, 9, 3, 20, 5, 29, 25, 2, 19, 9, 18, 27, -1, 1]

# b = 9
# powers = [29, 6, 13, 12, 24, 15, 16, 21, 0, 11, 0, 16, 18, 29, 16, 13, 30, 8, 30, -1, 25, 2, 5, 23, 19, 9, -1, 29, 25, 7, 6]
# [5, 24, 4, 22, -1, 30, 29, 12, 0, 30, 23, 0, 17, 24, 0, 19, 0, 7, 10, 17, 28, 0, 19, 19, -1, 17, 29, 19, 17, 13, 28] 

n = _sage_const_31 
k = _sage_const_21 
d = n - k + _sage_const_1 

F = GF(_sage_const_2 )['x']; (x,) = F._first_ngens(1)
K = GF(_sage_const_2 **_sage_const_5 , name='a', modulus=x**_sage_const_5  +x**_sage_const_2  + _sage_const_1 , names=('a',)); (a,) = K._first_ngens(1)
Q = PolynomialRing(K, names=('z',)); (z,) = Q._first_ngens(1)

v = _sage_const_0 
for i, ei in enumerate(powers):
  if ei != -_sage_const_1 :
    v = v + a ** ei * z ** i

sj = vector([v(a ** j) for j in range(b, b + d - _sage_const_1 )])
M = Matrix([sj[i:i+errors] for i in range(_sage_const_0 , errors)])
Mres = sj[errors:errors*_sage_const_2 ]
Lam = M.solve_right(Mres)
Lampoly = z**errors
for i in range(_sage_const_0 , errors):
    Lampoly += z ** i * Lam[i]
X_locations = list(filter(lambda i: Lampoly(a**i) == _sage_const_0 , range(n)))
X = vector(list(map(lambda i : a**i, X_locations)))
Lmu = Matrix([X.apply_map(lambda y : y ** (b + i)) for i in range(_sage_const_0 , errors)])
Y = Lmu.solve_right(sj[_sage_const_0 :errors])
Y_powers = []
for elem in Y:
    for i in range(n):
        if (a ** i == elem):
            Y_powers.append(i)
print("Error_locations:")
print(' '.join(map(str, X_locations)))
print("Error_values:")
print(' '.join(map(str, Y_powers)))

